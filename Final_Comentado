close all 
clc

x1 = 10;  % coordenada x1 ya dada 
x4 = 280; % coordenada x4 ya dada
y1 = 170; % coordenada y1 ya dada
y4 = 120; % coordenada y4 ya dada
carro=15;
coeficiente=0.9;
masa=700;

%Se secciona la grafica y solo se seleccionan laz zonas donde es mas
%posible que las coordenadas correctas se encuentren para de esta forma
incx = (x4-x1)/3;  
for i = 1:1:incx
    for j = 1:1:x4-incx
        quit=0;
        x2 = x1+i;
        x3 = x4-i;
        y2 = y1+j;
        y3 = y4-j;


        %Matriz principal
        A = [(x1^3),(x1^2),(x1),1; (x2^3),(x2^2),(x2),1; (x3^3),(x3^2),(x3),1; (x4^3),(x4^2),(x4),1];

        %Vector Y
        Y = [y1; y2; y3; y4];

        %matriz de soluciones
        Z = inv(A) * Y;

%se forma la funcion con los coeficientes que se generan en la iteracion d
%los ciclos for rpncipales y se revisan que se cumplan las condiciones que
%establece el reto.
        if (Z(1)~=0 )
            funcion = @(X)(Z(1)*X.^3)+(Z(2)*X.^2) + (Z(3)*X)+(Z(4)); %funcion principal
            funcion_2=@(X) (3*Z(1)*X.^2)+(2*Z(2)*X) + (Z(3)); %funcion derivada para calculo del radio de curva
            funcion_3=@(X) ((6*Z(1)*X)+(2*Z(2))); %segunda derivada para calculo del radio de curva
            funcion_4=@(X) sqrt((1+((funcion_2(X)).^2))); %funcion de longitud de curvatura
            longitud=integral(funcion_4,x1,x4); %se calcula la longitud
            %se corrobora si se cumplen las condiciones de longitud de arco
            if(longitud<500 && longitud>300)
                cont=1;
                X=[x1:x4];
                Y=[];
                xmax = (-Z(2)-sqrt(Z(2)^2-3*Z(1)*Z(3)))/(3*Z(1));
                xmin = (-Z(2)+sqrt(Z(2)^2-3*Z(1)*Z(3)))/(3*Z(1));
                
                for k=x1:x4
                    Y(cont)=funcion(k);
                    cont=cont+1;
                end
                radio=((1+(funcion_2(xmax)^2))^(3/2))/(funcion_3(xmax));
                
                %se comprueba si el radio de curvatura cumple con las
                %dimensiones establecidas
                if radio < 50 && radio>-50
                    PC1y = funcion(xmax)-abs(radio); 
                    PC2y = funcion(xmin)+abs(radio);
                    centerc1 = [xmax PC1y];
                    centerc2 = [xmin PC2y];
                    
                    disp(longitud)
                    disp(radio)
                    disp(Z)
                    quit=1;
                    figure('Name','Armando')
                    hold on
                    
                    %se grafican los circulos en los puntos criticos
                    viscircles(centerc1, abs(radio),'color','r','LineStyle','--');
                    viscircles(centerc2, abs(radio),'color','r','LineStyle','--');
                    axis([7 282 50 250])
                    plot(X,Y)
                    hold off
                   break;
                end
            end
        end
    end
    if quit == 1
        break;
    end
end
contador=1;
puntos=[];
%Se recorren los puntos cercanos al maximo y minimo
for i = 1:1:incx
    x2 = xmin - i;
    x3 = xmax - i;
    x4 = xmin + i;
    x5 = xmax + i;

    %Se evaluan los valores en las funciones para calcular los radios

    radio=((1+(funcion_2(x2)^2))^(3/2))/(funcion_3(x2));
    radio1=((1+(funcion_2(x3)^2))^(3/2))/(funcion_3(x3));
    radio2=((1+(funcion_2(x4)^2))^(3/2))/(funcion_3(x4));
    radio3=((1+(funcion_2(x5)^2))^(3/2))/(funcion_3(x5));
    
    %Se verifica que el radio este en el rango
    if radio < 50 && radio > -50
        hold on %Si se cumple se grafica la tangente
        y = @(X) funcion_2(x2) * (X-x2) + funcion(x2);
        fplot(y,[x2 x2+50])
        hold off
        xrec=x2; %Se guarda la variable de la ultima recta tangente en la curva del minimo
        velocidad=sqrt(abs(radio)*coeficiente*9.8); %Se evalua la velocidad maxima en ese punto
        if (carro>=velocidad) %Se evalua si la velocidad del carro es mayor o igual que la velocidad
            puntos(contador)=x2; %Se agrega el punto al vector de puntos
        end
    end
    
    if radio1 < 50 && radio1 > -50
        hold on
        y1 = @(X) funcion_2(x3) * (X-x3) + funcion(x3);
        fplot(y1,[x3 x3+50])
        hold off
        xrecm=x3; %Se guarda el primer punto de la recta tangente en la curva del minimo 
        velocidad=sqrt(abs(radio1)*coeficiente*9.8);
        if (carro>velocidad)
            puntos(contador)=x3;
            contador=contador+1;
        end
        
    end
    
    if radio2 < 50 && radio2 > -50
        hold on
        y2 = @(X) funcion_2(x4) * (X-x4) + funcion(x4);
        fplot(y2,[x4 x4+50])
        hold off
        xrec2=x4;
        velocidad=sqrt(abs(radio2)*coeficiente*9.8);
        if (carro>=velocidad)
            puntos(contador)=x4;
            contador=contador+1;
        end
    end      
    if radio3 < 50 && radio3 > -50
        hold on
        y3 = @(X) funcion_2(x5) * (X-x5) + funcion(x5);
        fplot(y3,[x5 x5+50])
        hold off
        xrecm2=x5;
        velocidad=sqrt(abs(radio3)*coeficiente*9.8);
        if (carro>=velocidad)
            puntos(contador)=x5;
            contador=contador+1;
        end
    end
end
    
a1=atand(funcion_2(xrec)); %Se calcula el angulo de la primera recta tangente del minimo
a2=atand(funcion_2(xrecm));%Se calcula el angulo de la primera recta tangente del maximo
xrec1=(xrec-abs(((25/(sind(a1)))))); %Se calcula el punto x en el que la distancia es 25
xrecm1=(xrecm-abs(((25/(sind(a2))))));
ancho2=80*cosd(a1); %Se calcula la longitud en x para que la hipotenusa sea 80
ancho=80*cosd(a2);

hold on
y2 = @(X) funcion_2(xrec) * (X-xrec1) + funcion(xrec); %Funcion para graficar las lineas de las bancas
y3 = @(X) funcion_2(xrecm) * (X-xrecm1) + funcion(xrecm);
fplot(y2,[xrec-(ancho2/2) (xrec+(ancho2/2))],'color','b','LineWidth',10)%Se grafica la linea de la banca con grosor de 10
fplot(y3,[xrecm-ancho/2 xrecm+ancho/2],'color','b','LineWidth',10)
hold off

figure('Name','Carretera')


hold on
plot(X,Y,'color','k','LineWidth',20) %Se grafica la carretera
fplot(y2,[xrec-(ancho2/2) (xrec+(ancho2/2))],'color','g','LineWidth',10) %Se grafican las bancas
fplot(y3,[xrecm-ancho/2 xrecm+ancho/2],'color','g','LineWidth',10)
fplot(funcion,[xrec, xrec2],'color','b','LineWidth',20) %Se grafican los puntos de riesgo
fplot(funcion,[xrecm, xrecm2],'color','b','LineWidth',20)
plot(X,Y,'color','y','LineStyle','--','LineWidth',4)

h = animatedline('Color','r','Marker','s', 'MarkerSize',10,'MarkerFaceColor','r');

%Se evalua si el vector de puntos donde carro>velocidad no estÃ¡ vacio
if(numel(puntos)>0)
    i=1;
    px=[];
    py=[];
    x6=min(puntos);%Se extrae el punto donde primero se supera la velocidad
    y3 = @(X) funcion_2(x6) * (X-x6) + funcion(x6);%Se crea la funcion de la tangente
    for k=x1:x6%Se grafica la trayectoria normal hasta el punto en donde el carro derrapa
    px(i)=k;
    py(i)=funcion(k);
    clearpoints(h)
    addpoints(h,px(i),py(i));
    drawnow 
    end

    EnergiaPerdida=(0.5*masa*(carro^2));%Se calcula la energia perdida
    distancia =(carro^2)/(2*coeficiente*9.81);%Se calcula la distancia que el carro recorre
    distancia1 = (cos(atan(funcion_2(xrecm))))*(distancia);%Se calcula la distancia en x
    
    for k=x6:(x6+ distancia1)%Se grafica desde el punto en el que empieza a derraparse hasta donde se cumple la distancia
    px(i)=k;
    py(i)=y3(k);
%     clearpoints(h)
    addpoints(h,px(i),py(i));
    drawnow 
    end
    %Se imprime el texto en la grafica
    text(150, 250,"Distancia: "+distancia +" m", 'FontSize', 14)
    text(150, 235,"Energia perdida: " + EnergiaPerdida + " J", 'FontSize', 14 )
   
else  
    for k=1:numel(X) %Se grafica la trayectoria normal si el vector esta vacio
    clearpoints(h)
    addpoints(h,X(k),Y(k));
    drawnow 
    end
end

hold off
